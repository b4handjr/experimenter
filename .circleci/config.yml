version: 2.1

parameters:
  # This parameter is used to trigger the main workflow
  trigger:
    type: boolean
    default: true

  # A parameter per package
  api:
    type: boolean
    default: false
  docs:
    type: boolean
    default: false
  ui:
    type: boolean
    default: false

jobs:
  trigger-workflows:
    docker: 
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Trigger workflows
          command: chmod +x .circleci/monorepo.sh && .circleci/monorepo.sh
          environment:
            # (optional) print additional debug information
            MONOREPO_DEBUG: "true"
  test:
    parameters:
      circleci_args:
        type: string
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2
      docker_layer_caching: true
    resource_class: large
    working_directory: ~/experimenter
    steps:
      - run:
          name: Docker info
          command: docker -v
      - run:
          name: Docker compose info
          command: docker-compose -v
      - checkout
      - run:
          name: Run tests and linting
          environment:
            CIRCLECI_ARGS: "<< parameters.circleci_args >>"
          command: |
            cp .env.sample .env
            CIRCLECI_ARGS=$CIRCLECI_ARGS make custom_check

  check:
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2
      docker_layer_caching: true
    resource_class: large
    working_directory: ~/experimenter
    steps:
      - run:
          name: Docker info
          command: docker -v
      - run:
          name: Docker compose info
          command: docker-compose -v
      - checkout
      - run:
          name: Run tests and linting
          command: |
            cp .env.sample .env
            make check

  integration_nimbus_desktop_release:
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2
      docker_layer_caching: true
    resource_class: xlarge
    working_directory: ~/experimenter
    environment:
      FIREFOX_VERSION: :firefox-release
      PYTEST_ARGS: -k DESKTOP -m run_targeting -n 2
    steps:
      - checkout
      - restore_cache:
          key: firefox-cache-release
      - run:
          name: Load built Firefox and echo version
          command: |
            docker load -i /home/circleci/experimenter/images/firefox-release.tar
            docker run -it selenium/standalone-firefox${FIREFOX_VERSION} firefox --version
      - run:
          name: Run integration tests
          command: |
            cp .env.integration-tests .env
            make refresh SKIP_DUMMY=1 up_prod_detached integration_test_nimbus PYTEST_ARGS="$PYTEST_ARGS"
  
  integration_nimbus_desktop_beta:
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2
      docker_layer_caching: true
    resource_class: xlarge
    working_directory: ~/experimenter
    environment:
      FIREFOX_VERSION: :firefox-beta
      PYTEST_ARGS: -k DESKTOP -m run_targeting -n 2
    steps:
      - checkout
      - restore_cache:
          key: firefox-cache-beta
      - run:
          name: Load built Firefox and echo version
          command: |
            docker load -i /home/circleci/experimenter/images/firefox-beta.tar
            docker run -it selenium/standalone-firefox${FIREFOX_VERSION} firefox --version
      - run:
          name: Run integration tests
          command: |
            cp .env.integration-tests .env
            make refresh SKIP_DUMMY=1 up_prod_detached integration_test_nimbus PYTEST_ARGS="$PYTEST_ARGS"
  integration_nimbus_desktop:
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2
      docker_layer_caching: true
    resource_class: xlarge
    working_directory: ~/experimenter
    parallelism: 7 # This should match the number of entries in parallel_pytest_args.txt
    environment:
      FIREFOX_VERSION: :latest
    steps:
      - checkout
      - run:
          name: Run integration tests
          command: |
            PYTEST_ARGS=$(circleci tests split "app/tests/integration/nimbus/parallel_pytest_args.txt")
            cp .env.integration-tests .env
            make refresh SKIP_DUMMY=1 FIREFOX_VERSION=":latest" up_prod_detached integration_test_nimbus PYTEST_ARGS="$PYTEST_ARGS"
  integration_nimbus_sdk:
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2
      docker_layer_caching: true
    resource_class: medium
    working_directory: ~/experimenter
    steps:
      - checkout
      - run:
          name: Run rust integration tests
          command: |
            cp .env.integration-tests .env
            make refresh SKIP_DUMMY=1 up_prod_detached integration_test_nimbus_rust PYTEST_ARGS="$PYTEST_ARGS"

  deploy:
    working_directory: ~/experimenter
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2
      docker_layer_caching: true
    steps:
      - checkout
      - deploy:
          name: Deploy to latest
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            make build_dev build_test build_ui
            ./scripts/store_git_info.sh
            make build_prod
            docker tag app:dev ${DOCKERHUB_REPO}:build_dev
            docker tag app:test ${DOCKERHUB_REPO}:build_test
            docker tag app:ui ${DOCKERHUB_REPO}:build_ui
            docker tag app:deploy ${DOCKERHUB_REPO}:latest
            docker push ${DOCKERHUB_REPO}:build_dev
            docker push ${DOCKERHUB_REPO}:build_test
            docker push ${DOCKERHUB_REPO}:build_ui
            docker push ${DOCKERHUB_REPO}:latest
  
  build_firefox_versions:
    working_directory: ~/experimenter
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2
      docker_layer_caching: true
    steps:
      - checkout
      - restore_cache:
          key: version-cache
      - run:
          name: Check for Firefox Update
          command: |
            results=$(sudo ./.circleci/get_firefox_versions.sh)
            if [ $? -eq 0 ]; then 
                circleci-agent step halt
            fi
      - run:
          name: Get Firefox Versions
          command: |
            git clone --depth=1 git@github.com:SeleniumHQ/docker-selenium.git
            cd docker-selenium
            if echo "$results" | grep -q "BETA"; then
                BUILD_ARGS="--build-arg FIREFOX_VERSION=devedition-latest" VERSION="firefox" BUILD_DATE="beta" make standalone_firefox
            fi
            if echo "$results" | grep -q "RELEASE"; then
                BUILD_ARGS="--build-arg FIREFOX_VERSION=latest" VERSION="firefox" BUILD_DATE="release" make standalone_firefox
            fi
      - run:
          name: Save Images
          command: |
            mkdir -p /home/circleci/experimenter/images
            docker save -o /home/circleci/experimenter/images/firefox-beta.tar selenium/standalone-firefox:firefox-beta
            docker save -o /home/circleci/experimenter/images/firefox-release.tar selenium/standalone-firefox:firefox-release
            mv /home/circleci/experimenter/new_versions.txt /home/circleci/experimenter/old_versions.txt
      - save_cache:
          name: Cache Beta
          key: firefox-cache-beta-{{ checksum "/home/circleci/experimenter/images/firefox-beta.tar" }}
          paths: 
            - /home/circleci/experimenter/images/firefox-beta.tar
      - save_cache:
          name: Cache Release
          key: firefox-cache-release-{{ checksum "/home/circleci/experimenter/images/firefox-release.tar" }}
          paths: 
            - /home/circleci/experimenter/images/firefox-release.tar
      - save_cache:
          key: version-cache-{{ checksum "old_versions.txt" }}
          paths: 
            - /home/circleci/experimenter/old_versions.txt

workflows:
  version: 2
  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - trigger-workflows

  # Workflows defined for each package.

  api:
    when: << pipeline.parameters.api >>
    jobs:
      - test:
          name: test
          circleci_args: pytest --cov --cov-report term-missing
  docs:
    when: << pipeline.parameters.docs >>
    jobs:
      - test:
          name: docs
          circleci_args: python manage.py generate_docs --check=true
  ui:
    when: << pipeline.parameters.ui >>
    jobs:
      - test:
          name: ui
          circleci_args: |
            yarn workspace @experimenter/nimbus-ui lint; \
            yarn workspace @experimenter/nimbus-ui lint:tsc; \ 
            CI=yes yarn workspace @experimenter/nimbus-ui test:cov 
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - build_firefox_versions
              
  # build:
  #   jobs:
  #     - check:
  #         name: check
  #     - integration_nimbus_desktop_release:
  #         name: integration_nimbus_desktop_release
  #         filters:
  #           branches:
  #             ignore:
  #               - main
  #     - integration_nimbus_desktop_beta:
  #         name: integration_nimbus_desktop_beta
  #         filters:
  #           branches:
  #             ignore:
  #               - main
  #     - integration_nimbus_desktop:
  #         name: integration_nimbus_desktop
  #         filters:
  #           branches:
  #             ignore:
  #               - main
  #     - integration_nimbus_sdk:
  #         name: integration_nimbus_sdk
  #         filters:
  #           branches:
  #             ignore:
  #               - main
  #     - deploy:
  #         filters:
  #           branches:
  #             only: main
  #         requires:
  #          - check